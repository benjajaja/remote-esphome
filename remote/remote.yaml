substitutions:
  device_name: remote

esphome:
  name: ${device_name}-esphome

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: esp-idf

# Enable logging
logger:

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .lan

mqtt:
  broker: ops.lan
  port: 1883
  discovery: true
  discovery_retain: true
  discovery_unique_id_generator: mac
  birth_message:
    topic: ${device_name}-esphome/status
    payload: online
  will_message:
    topic: ${device_name}-esphome/status
    payload: offline

light:
  - platform: binary
    name: "WiFi Status LED"
    id: wifi_led
    output: led_output
    internal: true

output:
  - platform: gpio
    pin: GPIO2  # Change this to your LED pin
    id: led_output

# WiFi connection status automation.
interval:
  - interval: 5s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - light.turn_off: wifi_led
          else:
            - light.turn_on: wifi_led
 
remote_transmitter:
  pin: GPIO13
  carrier_duty_percent: 100%

script:
  - id: transmit_house_code
    parameters:
      house: int
      code: int
    then:
      - lambda: |-
          // Use uint32_t to ensure we have enough bits
          uint32_t combined = ((uint32_t)house << 8) | (uint32_t)code;
          
          // Convert to 24-bit binary string
          std::string binary_str = "";
          for (int i = 23; i >= 0; i--) {
            if (combined & (1UL << i)) {
              binary_str += "1";
            } else {
              binary_str += "0";
            }
          }
          
          ESP_LOGD("house_code", "House: %d, Code: %d -> Combined: %lu -> Binary: %s", 
                   house, code, (unsigned long)combined, binary_str.c_str());
          
          id(binary_code) = binary_str;
      - remote_transmitter.transmit_rc_switch_raw:
          code: !lambda "return id(binary_code);"
          protocol:
            pulse_length: 400
            sync: [1, 31]
            zero: [1, 3]
            one: [3, 1]
          repeat:
            times: 5
            wait_time: 0s
  - id: codes_to_binary
    parameters:
      codes: string
    then:
      - lambda: |-
          // Clear previous codes
          id(binary_codes).clear();
          
          // Parse comma-separated string
          std::string codes_str = codes;
          std::string delimiter = ",";
          size_t pos = 0;
          std::string token;
          
          // Add trailing comma to catch last element
          codes_str += ",";
          
          while ((pos = codes_str.find(delimiter)) != std::string::npos) {
            token = codes_str.substr(0, pos);
            
            // Trim whitespace
            token.erase(0, token.find_first_not_of(" \t"));
            token.erase(token.find_last_not_of(" \t") + 1);
            
            if (!token.empty() && token[0] == '{') {
              // Parse format: {bits}code
              size_t close_brace = token.find('}');
              if (close_brace != std::string::npos) {
                std::string bits_str = token.substr(1, close_brace - 1);
                int bit_count = std::stoi(bits_str);
                std::string code_str = token.substr(close_brace + 1);
                
                // Parse hex code (assume hex without 0x prefix)  
                uint64_t parsed_code = std::stoull(code_str, nullptr, 16);
                
                // Find how many bits this code naturally has
                int natural_bits = 64 - __builtin_clzll(parsed_code);
                
                uint64_t code;
                if (natural_bits > bit_count) {
                  // Shift right to align properly
                  int shift = natural_bits - bit_count + 1;
                  code = parsed_code >> shift;
                  // Mask to ensure we only use the specified bit count
                  uint64_t mask = (1ULL << bit_count) - 1;
                  code = code & mask;
                } else {
                  code = parsed_code;
                }
                
                // Convert to binary string and apply inverse logic
                std::string binary = "";
                for (int i = bit_count - 1; i >= 0; i--) {
                  bool bit = (code >> i) & 1;
                  binary += bit ? "0" : "1";  // Apply inverse logic
                }
                
                // Store in global vector
                id(binary_codes).push_back(binary);

                // Log for debugging
                ESP_LOGD("transmit_codes", "Code: %s, Bits: %d, Parsed: 0x%llx, Binary: %s", 
                         code_str.c_str(), bit_count, code, binary.c_str());
              }
            }
            
            codes_str.erase(0, pos + delimiter.length());
          }
      - repeat:
          count: !lambda "return id(binary_codes).size();"
          then:
            - remote_transmitter.transmit_rc_switch_raw:
                code: !lambda "return id(binary_codes)[iteration];"
                protocol:
                  pulse_length: 104
                  sync: [1, 116]
                  zero: [4, 12]
                  one: [12, 4]
globals:
  - id: binary_code
    type: std::string
    initial_value: '""'
  - id: binary_codes
    type: std::vector<std::string>
    restore_value: no

button:
  # Bedroom 1
  - platform: template
    name: "Bedroom 1 Light On"
    id: ${device_name}_ceiling_fan_light_on
    on_press:
      - script.execute:
          id: transmit_house_code
          house: 13785
          code: 4
  - platform: template
    name: "Bedroom 1 Light Off"
    id: ${device_name}_ceiling_fan_light_off
    on_press:
      - script.execute:
          id: transmit_house_code
          house: 13785
          code: 1
  # - platform: template
    # name: "ON BLUE"
    # on_press:
      # - script.execute:
          # id: transmit_house_code
          # house: 13785
          # code: 6
  - platform: template
    name: "Bedroom 1 Fan 1"
    id: ${device_name}_ceiling_fan_1
    on_press:
      - script.execute:
          id: transmit_house_code
          house: 13785
          code: 10
  - platform: template
    name: "Bedroom 1 Fan 2"
    id: ${device_name}_ceiling_fan_2
    on_press:
      - script.execute:
          id: transmit_house_code
          house: 13785
          code: 7
  # - platform: template
    # name: "FAN 3"
    # on_press:
      # - script.execute:
          # id: transmit_house_code
          # house: 13785
          # code: 5
  # - platform: template
    # name: "FAN 4"
    # on_press:
      # - script.execute:
          # id: transmit_house_code
          # house: 13785
          # code: 9
  # - platform: template
    # name: "FAN 4"
    # on_press:
      # - script.execute:
          # id: transmit_house_code
          # house: 13785
          # code: 9
  # - platform: template
    # name: "FAN 5"
    # on_press:
      # - script.execute:
          # id: transmit_house_code
          # house: 13785
          # code: 12
  # - platform: template
    # name: "FAN 6"
    # on_press:
      # - script.execute:
          # id: transmit_house_code
          # house: 13785
          # code: 11
  - platform: template
    name: "Bedroom 1 Fan Off"
    id: ${device_name}_ceiling_fan_off
    on_press:
      - script.execute:
          id: transmit_house_code
          house: 13785
          code: 8
  - platform: template
    name: "Bedroom 1 Fan 2 Hours"
    id: ${device_name}_ceiling_fan_2_hours
    on_press:
      - script.execute:
          id: transmit_house_code
          house: 13785
          code: 18
  - platform: template
    name: "Bedroom 2 Light On"
    on_press:
      - script.execute:
          id: transmit_house_code
          house: 63258
          code: 4
  - platform: template
    name: "Bedroom 2 Light Off"
    on_press:
      - script.execute:
          id: transmit_house_code
          house: 63258
          code: 1
  - platform: template
    name: "Living Room Light Toggle"  
    id: ${device_name}_ceiling_fan_light_toggle
    on_press:
      - script.execute:
          id: codes_to_binary
          codes: '{32}d1eff8c7, {33}68f7fc638, {33}68f7fc638'
